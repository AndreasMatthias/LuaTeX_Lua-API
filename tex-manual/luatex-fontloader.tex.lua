---% language=uk
---
---\environment luatex-style
---
---\startcomponent luatex-fontloader
---
---\startchapter[reference=fontloader,title={The fontloader}]
---
---\topicindex {fonts+loading}
---
---The fontloader library is sort of independent of the rest in the sense that it
---can load font into a *Lua* table that then can be converted into a table suitable
---for *TeX*. The library is an adapted subset of \FONTFORGE\ and as such gives a
---similar view on a font (which has advantages when you want to debug). We will not
---discuss \OPENTYPE\ in detail here as the \MICROSOFT\ website offers enough
---information about it. The tables returned by the loader are not that far from the
---standard. We have no plans to extend the loader (it may even become an external
---module at some time).
---
---\startsection[title={Getting quick information on a font}][library=fontloader]
---
---\topicindex {fonts+information}
---
---\libindex{info}
---
---When you want to locate font by name you need some basic information that is
---hidden in the font files. For that reason we provide an efficient helper that
---gets the basic information without loading all of the font. Normally this helper
---is used to create a font (name) database.
---
---```
---<table> info =
---    fontloader.info(<string> filename)
---```
---
---This function returns either `nil`, or a `table`, or an array of
---small tables (in the case of a \TRUETYPE\ collection). The returned table(s) will
---contain some fairly interesting information items from the font(s) defined by the
---file:
---
---\starttabulate[|l|l|p|]
---\DB key                 \BC type     \BC explanation 
---\TB
--- `fontname`      string    the \POSTSCRIPT\ name of the font
--- `fullname`      string    the formal name of the font
--- `familyname`    string    the family name this font belongs to
--- `weight`        string    a string indicating the color value of the font
--- `version`       string    the internal font version
--- `italicangle`   float     the slant angle
--- `units_per_em`  number    1000 for \POSTSCRIPT-based fonts, usually 2048 for \TRUETYPE
--- `pfminfo`       table     (see \in{section}[fontloaderpfminfotable])
---\LL
---\stoptabulate
---
---Getting information through this function is (sometimes much) more efficient than
---loading the font properly, and is therefore handy when you want to create a
---dictionary of available fonts based on a directory contents.
---
---\stopsection
---
---\startsection[title={Loading an \OPENTYPE\ or \TRUETYPE\ file}][library=fontloader]
---
---\topicindex {\OPENTYPE}
---\topicindex {\TRUETYPE}
---
---\libindex{open}
---\libindex{close}
---\libindex{to_table}
---
---If you want to use an \OPENTYPE\ font, you have to get the metric information
---from somewhere. Using the `fontloader` library, the simplest way to get
---that information is thus:
---
---```
---function load_font (filename)
---  local metrics = nil
---  local font = fontloader.open(filename)
---  if font then
---     metrics = fontloader.to_table(font)
---     fontloader.close(font)
---  end
---  return metrics
---end
---
---myfont = load_font('/opt/tex/texmf/fonts/data/arial.ttf')
---```
---
---The main function call is
---
---```
---<userdata> f, <table> w = fontloader.open(<string> filename)
---<userdata> f, <table> w = fontloader.open(<string> filename, <string> fontname)
---```
---
---The first return value is a userdata representation of the font. The second
---return value is a table containing any warnings and errors reported by fontloader
---while opening the font. In normal typesetting, you would probably ignore the
---second argument, but it can be useful for debugging purposes.
---
---For \TRUETYPE\ collections (when filename ends in 'ttc') and \DFONT\ collections,
---you have to use a second string argument to specify which font you want from the
---collection. Use the `fontname` strings that are returned by `fontloader.info` for that.
---
---To turn the font into a table, `fontloader.to_table` is used on the font
---returned by `fontloader.open`.
---
---```
---<table> f = fontloader.to_table(<userdata> font)
---```
---
---This table cannot be used directly by *LuaTeX* and should be turned into another
---one as described in \in {chapter} [fonts]. Do not forget to store the `fontname` value in the `psname` field of the metrics table to be returned
---to *LuaTeX*, otherwise the font inclusion backend will not be able to find the
---correct font in the collection.
---
---See \in {section} [fontloadertables] for details on the userdata object returned
---by `fontloader.open` and the layout of the `metrics` table returned
---by `fontloader.to_table`.
---
---The font file is parsed and partially interpreted by the font loading routines
---from \FONTFORGE. The file format can be \OPENTYPE, \TRUETYPE, \TRUETYPE\
---Collection, \CFF, or \TYPEONE.
---
---There are a few advantages to this approach compared to reading the actual font
---file ourselves:
---
---
---
---* The font is automatically re-encoded, so that the `metrics` table for
---    \TRUETYPE\ and \OPENTYPE\ fonts is using \UNICODE\ for the character indices.
---
---
---* Many features are pre-processed into a format that is easier to handle than
---    just the bare tables would be.
---
---
---* \POSTSCRIPT-based \OPENTYPE\ fonts do not store the character height and
---    depth in the font file, so the character boundingbox has to be calculated in
---    some way.
---
---
---
---
---A loaded font is discarded with:
---
---```
---fontloader.close(<userdata> font)
---```
---
---\stopsection
---
---\startsection[title={Applying a “feature file”}][library=fontloader]
---
---\libindex{apply_featurefile}
---
---You can apply a “feature file” to a loaded font:
---
---```
---<table> errors = fontloader.apply_featurefile(<userdata> font, <string> filename)
---```
---
---A “feature file” is a textual representation of the features in an
---\OPENTYPE\ font. See
---
---```
---http://www.adobe.com/devnet/opentype/afdko/topic_feature_file_syntax.html
---```
---
---and
---
---```
---http://fontforge.sourceforge.net/featurefile.html
---```
---
---for a more detailed description of feature files.
---
---If the function fails, the return value is a table containing any errors reported
---by fontloader while applying the feature file. On success, `nil` is
---returned.
---
---\stopsection
---
---\startsection[title={Applying an “\AFM\ file”}][library=fontloader]
---
---\topicindex {\TYPEONE}
---
---\libindex{apply_afmfile}
---
---You can apply an “\AFM\ file” to a loaded font:
---
---```
---<table> errors = fontloader.apply_afmfile(<userdata> font, <string> filename)
---```
---
---An \AFM\ file is a textual representation of (some of) the meta information
---in a \TYPEONE\ font. See
---
---```
---ftp://ftp.math.utah.edu/u/ma/hohn/linux/postscript/5004.AFM_Spec.pdf
---```
---
---for more information about \AFM\ files.
---
---Note: If you `fontloader.open` a \TYPEONE\ file named `font.pfb`,
---the library will automatically search for and apply `font.afm` if it exists
---in the same directory as the file `font.pfb`. In that case, there is no
---need for an explicit call to `apply_afmfile()`.
---
---If the function fails, the return value is a table containing any errors reported
---by fontloader while applying the AFM file. On success, `nil` is returned.
---
---\stopsection
---
---\startsection[title={Fontloader font tables},reference=fontloadertables][library=fontloader]
---
---\topicindex {fontloader+tables}
---
---\libindex{fields}
---
---As mentioned earlier, the return value of `fontloader.open` is a userdata
---object. One way to have access to the actual metrics is to call `fontloader.to_table` on this object, returning the table structure that is
---explained in the following sections. In teh following sections we will not
---explain each field in detail. Most fields are self descriptive and for the more
---technical aspects you need to consult the relevant font references.
---
---It turns out that the result from `fontloader.to_table` sometimes needs
---very large amounts of memory (depending on the font's complexity and size) so it
---is possible to access the userdata object directly.
---
---
---* All top-level keys that would be returned by `to_table()`
---    can also be accessed directly.
---
---* The top-level key “glyphs” returns a {\it virtual\/} array that
---    allows indices from `f.glyphmin` to (`f.glyphmax`).
---
---* The items in that virtual array (the actual glyphs) are themselves also
---    userdata objects, and each has accessors for all of the keys explained in the
---    section “Glyph items” below.
---
---* The top-level key “subfonts” returns an {\it actual} array of userdata
---    objects, one for each of the subfonts (or nil, if there are no subfonts).
---
---
---
---A short example may be helpful. This code generates a printout of all
---the glyph names in the font `PunkNova.kern.otf`:
---
---```
---local f = fontloader.open('PunkNova.kern.otf')
---print (f.fontname)
---local i = 0
---if f.glyphcnt > 0 then
---    for i=f.glyphmin,f.glyphmax do
---       local g = f.glyphs[i]
---       if g then
---          print(g.name)
---       end
---       i = i + 1
---    end
---end
---fontloader.close(f)
---```
---
---In this case, the *LuaTeX* memory requirement stays below 100MB on the test
---computer, while the internal structure generated by `to_table()` needs more
---than 2GB of memory (the font itself is 6.9MB in disk size).
---
---Only the top-level font, the subfont table entries, and the glyphs are virtual
---objects, everything else still produces normal *Lua* values and tables.
---
---If you want to know the valid fields in a font or glyph structure, call the `fields` function on an object of a particular type (either glyph or font):
---
---```
---<table> fields = fontloader.fields(<userdata> font)
---<table> fields = fontloader.fields(<userdata> font_glyph)
---```
---
---For instance:
---
---```
---local fields = fontloader.fields(f)
---local fields = fontloader.fields(f.glyphs[0])
---```
---
---\stopsection
---
---\startsection[title={Table types}][library=fontloader]
---
---\startsubsection[title={The main table}]
---
---The top-level keys in the returned table are (the explanations in this part of
---the documentation are not yet finished):
---
---\starttabulate[|l|l|p|]
---\DB key                                 \BC type      explanation 
---\TB
--- `table_version`                 number    indicates the metrics version (currently 0.3)
--- `fontname`                      string    \POSTSCRIPT\ font name
--- `fullname`                      string    official (human-oriented) font name
--- `familyname`                    string    family name
--- `weight`                        string    weight indicator
--- `copyright`                     string    copyright information
--- `filename`                      string    the file name
--- `version`                       string    font version
--- `italicangle`                   float     slant angle
--- `units_per_em`                  number    1000 for \POSTSCRIPT-based fonts, usually 2048 for \TRUETYPE
--- `ascent`                        number    height of ascender in `units_per_em`
--- `descent`                       number    depth of descender in `units_per_em`
--- `upos`                          float     
--- `uwidth`                        float     
--- `uniqueid`                      number    
--- `glyphs`                        array     
--- `glyphcnt`                      number    number of included glyphs
--- `glyphmax`                      number    maximum used index the glyphs array
--- `glyphmin`                      number    minimum used index the glyphs array
--- `notdef_loc`                    number    location of the `.notdef` glyph
---                                                         or `-1` when not present 
--- `hasvmetrics`                   number    
--- `onlybitmaps`                   number    
--- `serifcheck`                    number    
--- `isserif`                       number    
--- `issans`                        number    
--- `encodingchanged`               number    
--- `strokedfont`                   number    
--- `use_typo_metrics`              number    
--- `weight_width_slope_only`       number    
--- `head_optimized_for_cleartype`  number    
--- `uni_interp`                    enum      `unset`, `none`, `adobe`,
---                                                         `greek`, `japanese`, `trad_chinese`,
---                                                         `simp_chinese`, `korean`, `ams`
--- `origname`                      string    the file name, as supplied by the user
--- `map`                           table     
--- `private`                       table     
--- `xuid`                          string    
--- `pfminfo`                       table     
--- `names`                         table     
--- `cidinfo`                       table     
--- `subfonts`                      array     
--- `commments`                     string    
--- `fontlog`                       string    
--- `cvt_names`                     string    
--- `anchor_classes`                table     
--- `ttf_tables`                    table     
--- `ttf_tab_saved`                 table     
--- `kerns`                         table     
--- `vkerns`                        table     
--- `texdata`                       table     
--- `lookups`                       table     
--- `gpos`                          table     
--- `gsub`                          table     
--- `mm`                            table     
--- `chosenname`                    string    
--- `macstyle`                      number    
--- `fondname`                      string    
---%NC `design_size`                   number    
--- `fontstyle_id`                  number    
--- `fontstyle_name`                table     
---%NC `design_range_bottom`           number    
---%NC `design_range_top`              number    
--- `strokewidth`                   float     
--- `mark_classes`                  table     
--- `creationtime`                  number    
--- `modificationtime`              number    
--- `os2_version`                   number    
--- `math`                          table     
--- `validation_state`              table     
--- `horiz_base`                    table     
--- `vert_base`                     table     
--- `extrema_bound`                 number    
--- `truetype`                      boolean   signals a \TRUETYPE\ font 
---\LL
---\stoptabulate
---
---\stopsubsection
---
---\startsubsection[title={`glyphs`}]
---
---The `glyphs` is an array containing the per-character
---information (quite a few of these are only present if non-zero).
---
---\starttabulate[|l|l|p|]
---\DB key                      \BC type     \BC explanation 
---\TB
--- `name`               string    the glyph name 
--- `unicode`            number    unicode code point, or -1 
--- `boundingbox`        array     array of four numbers, see note below 
--- `width`              number    only for horizontal fonts 
--- `vwidth`             number    only for vertical fonts 
--- `tsidebearing`       number    only for vertical ttf/otf fonts, and only if non-zero 
--- `lsidebearing`       number    only if non-zero and not equal to boundingbox[1] 
--- `class`              string    one of "none", "base", "ligature", "mark", "component"
---                                              (if not present, the glyph class is “automatic”) 
--- `kerns`              array     only for horizontal fonts, if set 
--- `vkerns`             array     only for vertical fonts, if set 
--- `dependents`         array     linear array of glyph name strings, only if nonempty
--- `lookups`            table     only if nonempty 
--- `ligatures`          table     only if nonempty 
--- `anchors`            table     only if set 
--- `comment`            string    only if set 
--- `tex_height`         number    only if set 
--- `tex_depth`          number    only if set 
--- `italic_correction`  number    only if set 
--- `top_accent`         number    only if set 
--- `is_extended_shape`  number    only if this character is part of a math extension list 
--- `altuni`             table     alternate \UNICODE\ items 
--- `vert_variants`      table     
--- `horiz_variants`     table     
--- `mathkern`           table     
---\LL
---\stoptabulate
---
---On `boundingbox`: The boundingbox information for \TRUETYPE\ fonts and
---\TRUETYPE-based \OTF\ fonts is read directly from the font file.
---\POSTSCRIPT-based fonts do not have this information, so the boundingbox of
---traditional \POSTSCRIPT\ fonts is generated by interpreting the actual bezier
---curves to find the exact boundingbox. This can be a slow process, so the
---boundingboxes of \POSTSCRIPT-based \OTF\ fonts (and raw \CFF\ fonts) are
---calculated using an approximation of the glyph shape based on the actual glyph
---points only, instead of taking the whole curve into account. This means that
---glyphs that have missing points at extrema will have a too-tight boundingbox,
---but the processing is so much faster that in our opinion the tradeoff is worth
---it.
---
---The `kerns` and `vkerns` are linear arrays of small hashes:
---
---\starttabulate[|l|l|p|]
---\DB key           \BC type   \BC explanation 
---\TB
--- `char`    string  
--- `off`     number  
--- `lookup`  string  
---\LL
---\stoptabulate
---
---The `lookups` is a hash, based on lookup subtable names, with
---the value of each key inside that a linear array of small hashes:
---
---% TODO: fix this description
---
---\starttabulate[|l|l|p|]
---\DB key                  \BC type \BC explanation 
---\TB
--- `type`           enum  `position`, `pair`, `substitution`, `alternate`, `multiple`, `ligature`, `lcaret`, \cbk {kerning}, `vkerning`,
---                                      `anchors`, `contextpos`, `contextsub`, `chainpos`, `chainsub`, `reversesub`, `max`, `kernback`, `vkernback`
---                                      
--- `specification`  table  extra data 
---\LL
---\stoptabulate
---
---For the first seven values of `type`, there can be additional
---sub-information, stored in the sub-table `specification`:
---
---\starttabulate[|l|l|p|]
---\DB value               \BC type     \BC explanation 
---\TB
--- `position`      table     a table of the `offset_specs` type 
--- `pair`          table     one string: `paired`, and an array of one
---                                         or two `offset_specs` tables: `offsets` 
--- `substitution`  table     one string: `variant` 
--- `alternate`     table     one string: `components` 
--- `multiple`      table     one string: `components` 
--- `ligature`      table     two strings: `components`, `char` 
--- `lcaret`        array     linear array of numbers 
---\LL
---\stoptabulate
---
---Tables for `offset_specs` contain up to four number-valued fields: `x` (a horizontal offset), `y` (a vertical offset), `h` (an advance
---width correction) and `v` (an advance height correction).
---
---The `ligatures` is a linear array of small hashes:
---
---\starttabulate[|l|l|p|]
---\DB key               \BC type   \BC explanation 
---\TB
--- `lig`         table   uses the same substructure as a single item in
---                                     the `lookups` table explained above 
--- `char`        string  
--- `components`  array   linear array of named components 
--- `ccnt`        number  
---\LL
---\stoptabulate
---
---The `anchor` table is indexed by a string signifying the anchor type, which
---is one of:
---
---\starttabulate[|l|l|p|]
---\DB key             \BC type  \BC explanation 
---\TB
--- `mark`      table  placement mark 
--- `basechar`  table  mark for attaching combining items to a base char 
--- `baselig`   table  mark for attaching combining items to a ligature 
--- `basemark`  table  generic mark for attaching combining items to connect to 
--- `centry`    table  cursive entry point 
--- `cexit`     table  cursive exit point 
---\LL
---\stoptabulate
---
---The content of these is a short array of defined anchors, with the
---entry keys being the anchor names. For all except `baselig`, the
---value is a single table with this definition:
---
---\starttabulate[|l|l|p|]
---\DB key                 \BC type   \BC explanation 
---\TB
--- `x`             number  x location 
--- `y`             number  y location 
--- `ttf_pt_index`  number  truetype point index, only if given 
---\LL
---\stoptabulate
---
---For `baselig`, the value is a small array of such anchor sets sets, one for
---each constituent item of the ligature.
---
---For clarification, an anchor table could for example look like this :
---
---```
---['anchor'] = {
---    ['basemark'] = {
---        ['Anchor-7'] = { ['x']=170, ['y']=1080 }
---    },
---    ['mark'] ={
---        ['Anchor-1'] = { ['x']=160, ['y']=810 },
---        ['Anchor-4'] = { ['x']=160, ['y']=800 }
---    },
---    ['baselig'] = {
---        [1] = { ['Anchor-2'] = { ['x']=160, ['y']=650 } },
---        [2] = { ['Anchor-2'] = { ['x']=460, ['y']=640 } }
---        }
---    }
---```
---
---Note: The `baselig` table can be sparse!
---
---\stopsubsection
---
---\startsubsection[title={`map`}]
---
---The top-level map is a list of encoding mappings. Each of those is a table
---itself.
---
---\starttabulate[|l|l|p|]
---\DB key             \BC type   \BC explanation 
---\TB
--- `enccount`  number  
--- `encmax`    number  
--- `backmax`   number  
--- `remap`     table   
--- `map`       array   non-linear array of mappings
--- `backmap`   array   non-linear array of backward mappings
--- `enc`       table   
---\LL
---\stoptabulate
---
---The `remap` table is very small:
---
---\starttabulate[|l|l|p|]
---\DB key             \BC type   \BC explanation 
---\TB
--- `firstenc`  number  
--- `lastenc`   number  
--- `infont`    number  
---\LL
---\stoptabulate
---
---The `enc` table is a bit more verbose:
---
---\starttabulate[|l|l|p|]
---\DB key                     \BC type   \BC explanation 
---\TB
--- `enc_name`          string  
--- `char_cnt`          number  
--- `char_max`          number  
--- `unicode`           array   of \UNICODE\ position numbers
--- `psnames`           array   of \POSTSCRIPT\ glyph names
--- `builtin`           number  
--- `hidden`            number  
--- `only_1byte`        number  
--- `has_1byte`         number  
--- `has_2byte`         number  
--- `is_unicodebmp`     number  only if non-zero
--- `is_unicodefull`    number  only if non-zero
--- `is_custom`         number  only if non-zero
--- `is_original`       number  only if non-zero
--- `is_compact`        number  only if non-zero
--- `is_japanese`       number  only if non-zero
--- `is_korean`         number  only if non-zero
--- `is_tradchinese`    number  only if non-zero [name?]
--- `is_simplechinese`  number  only if non-zero
--- `low_page`          number  
--- `high_page`         number  
--- `iconv_name`        string  
--- `iso_2022_escape`   string  
---\LL
---\stoptabulate
---
---\stopsubsection
---
---\startsubsection[title={`private`}]
---
---This is the font's private \POSTSCRIPT\ dictionary, if any. Keys and values are
---both strings.
---
---\stopsubsection
---
---\startsubsection[title={`cidinfo`}]
---
---\starttabulate[|l|l|p|]
---\DB key               \BC type   \BC explanation 
---\TB
--- `registry`    string  
--- `ordering`    string  
--- `supplement`  number  
--- `version`     number  
---\LL
---\stoptabulate
---
---\stopsubsection
---
---\startsubsection[reference=fontloaderpfminfotable,title={`pfminfo`}]
---
---The `pfminfo` table contains most of the OS/2 information:
---
---\starttabulate[|l|l|p|]
---\DB key                     \BC type   \BC explanation 
---\TB
--- `pfmset`            number  
--- `winascent_add`     number  
--- `windescent_add`    number  
--- `hheadascent_add`   number  
--- `hheaddescent_add`  number  
--- `typoascent_add`    number  
--- `typodescent_add`   number  
--- `subsuper_set`      number  
--- `panose_set`        number  
--- `hheadset`          number  
--- `vheadset`          number  
--- `pfmfamily`         number  
--- `weight`            number  
--- `width`             number  
--- `avgwidth`          number  
--- `firstchar`         number  
--- `lastchar`          number  
--- `fstype`            number  
--- `linegap`           number  
--- `vlinegap`          number  
--- `hhead_ascent`      number  
--- `hhead_descent`     number  
--- `os2_typoascent`    number  
--- `os2_typodescent`   number  
--- `os2_typolinegap`   number  
--- `os2_winascent`     number  
--- `os2_windescent`    number  
--- `os2_subxsize`      number  
--- `os2_subysize`      number  
--- `os2_subxoff`       number  
--- `os2_subyoff`       number  
--- `os2_supxsize`      number  
--- `os2_supysize`      number  
--- `os2_supxoff`       number  
--- `os2_supyoff`       number  
--- `os2_strikeysize`   number  
--- `os2_strikeypos`    number  
--- `os2_family_class`  number  
--- `os2_xheight`       number  
--- `os2_capheight`     number  
--- `os2_defaultchar`   number  
--- `os2_breakchar`     number  
--- `os2_vendor`        string  
--- `codepages`         table   A two-number array of encoded code pages 
--- `unicoderages`      table   A four-number array of encoded unicode ranges 
--- `panose`            table   
---\LL
---\stoptabulate
---
---The `panose` subtable has exactly 10 string keys:
---
---\starttabulate[|l|l|p|]
---\DB key                    \BC type    \BC explanation 
---\TB
--- `familytype`       string   Values as in the \OPENTYPE\ font
---                                           specification: `Any`, `No Fit`,
---                                           `Text and Display`, `Script`,
---                                           `Decorative`, `Pictorial` 
---                                           \NR
--- `serifstyle`       string   See the \OPENTYPE\ font specification for
---                                           values 
--- `weight`           string   idem 
--- `proportion`       string   idem 
--- `contrast`         string   idem 
--- `strokevariation`  string   idem 
--- `armstyle`         string   idem 
--- `letterform`       string   idem 
--- `midline`          string   idem 
--- `xheight`          string   idem 
---\LL
---\stoptabulate
---
---\stopsubsection
---
---\startsubsection[reference=fontloadernamestable,title={`names`}]
---
---Each item has two top-level keys:
---
---\starttabulate[|l|l|p|]
---\DB key          \BC type   \BC explanation 
---\TB
--- `lang`   string  language for this entry 
--- `names`  table   
---\LL
---\stoptabulate
---
---The `names` keys are the actual \TRUETYPE\ name strings. The possible keys
---are: `copyright`, `family`, `subfamily`, `uniqueid`,
---`fullname`, `version`, `postscriptname`, `trademark`,
---`manufacturer`, `designer`, `descriptor`, `venderurl`,
---`designerurl`, `license`, `licenseurl`, `idontknow`,
---`preffamilyname`, `prefmodifiers`, `compatfull`, `sampletext`, `cidfindfontname`, `wwsfamily` and `wwssubfamily`.
---
---\stopsubsection
---
---\startsubsection[title={`anchor_classes`}]
---
---The anchor_classes classes:
---
---\starttabulate[|l|l|p|]
---\DB key           \BC type   \BC explanation 
---\TB
--- `name`    string  a descriptive id of this anchor class
--- `lookup`  string  
--- `type`    string  one of `mark`, `mkmk`, `curs`, `mklg` 
---\LL
---\stoptabulate
---
---% type is actually a lookup subtype, not a feature name. Officially, these
---% strings should be gpos_mark2mark etc.
---
---\stopsubsection
---
---\startsubsection[title={`gpos`}]
---
---The `gpos` table has one array entry for each lookup. (The `gpos_`
---prefix is somewhat redundant.)
---
---\starttabulate[|l|l|p|]
---\DB key              \BC type   \BC explanation 
---\TB
--- `type`       string  one of `gpos_single`, `gpos_pair`,
---                                    `gpos_cursive`, `gpos_mark2base`,\crlf
---                                    `gpos_mark2ligature`, `gpos_mark2mark`, `gpos_context`,\crlf `gpos_contextchain` 
--- `flags`      table   
--- `name`       string  
--- `features`   array   
--- `subtables`  array   
---\LL
---\stoptabulate
---
---The flags table has a true value for each of the lookup flags that is actually
---set:
---
---\starttabulate[|l|l|p|]
---\DB key                         \BC type    \BC explanation 
---\TB
--- `r2l`                   boolean  
--- `ignorebaseglyphs`      boolean  
--- `ignoreligatures`       boolean  
--- `ignorecombiningmarks`  boolean  
--- `mark_class`            string   
---\LL
---\stoptabulate
---
---The features subtable items of gpos have:
---
---\starttabulate[|l|l|p|]
---\DB key            \BC type   \BC explanation 
---\TB
--- `tag`      string  
--- `scripts`  table   
---\LL
---\stoptabulate
---
---The scripts table within features has:
---
---\starttabulate[|l|l|p|]
---\DB key           \BC type             \BC explanation 
---\TB
--- `script`  string            
--- `langs`   array of strings  
---\LL
---\stoptabulate
---
---The subtables table has:
---
---\starttabulate[|l|l|p|]
---\DB key                     \BC type   \BC explanation 
---\TB
--- `name`              string  
--- `suffix`            string  (only if used) % used by gpos_single to get a default
--- `anchor_classes`    number  (only if used)
--- `vertical_kerning`  number  (only if used)
--- `kernclass`         table   (only if used)
---\LL
---\stoptabulate
---
---The kernclass with subtables table has:
---
---\starttabulate[|l|l|p|]
---\DB key            \BC type             \BC explanation 
---\TB
--- `firsts`   array of strings  
--- `seconds`  array of strings  
--- `lookup`   string or array   associated lookup(s) 
--- `offsets`  array of numbers  
---\LL
---\stoptabulate
---
---Note: the kernclass (as far as we can see) always has one entry so it could be one level
---deep instead. Also the seconds start at `[2]` which is close to the fontforge
---internals so we keep that too.
---
---\stopsubsection
---
---\startsubsection[title={`gsub`}]
---
---This has identical layout to the `gpos` table, except for the
---type:
---
---\starttabulate[|l|l|p|]
---\DB key         \BC type   \BC explanation 
---\TB
--- `type`  string  one of `gsub_single`, `gsub_multiple`,
---                               `gsub_alternate`, `gsub_ligature`,\crlf
---                               `gsub_context`, `gsub_contextchain`,
---                               `gsub_reversecontextchain` 
---\LL
---\stoptabulate
---
---\stopsubsection
---
---\startsubsection[title={`ttf_tables` and `ttf_tab_saved`}]
---
---\starttabulate[|l|l|p|]
---\DB key           \BC type   \BC explanation 
---\TB
--- `tag`     string  
--- `len`     number  
--- `maxlen`  number  
--- `data`    number  
---\LL
---\stoptabulate
---
---\stopsubsection
---
---\startsubsection[title={`mm`}]
---
---\starttabulate[|l|l|p|]
---\DB key                   \BC type   \BC explanation 
---\TB
--- `axes`            table   array of axis names 
--- `instance_count`  number  
--- `positions`       table   array of instance positions
---                                         (\#axes * instances )
--- `defweights`      table   array of default weights for instances 
--- `cdv`             string  
--- `ndv`             string  
--- `axismaps`        table   
---\LL
---\stoptabulate
---
---The `axismaps`:
---
---\starttabulate[|l|l|p|]
---\DB key            \BC type   \BC explanation 
---\TB
--- `blends`   table   an array of blend points 
--- `designs`  table   an array of design values 
--- `min`      number  
--- `def`      number  
--- `max`      number  
---\LL
---\stoptabulate
---
---\stopsubsection
---
---\startsubsection[title={`mark_classes`}]
---
---The keys in this table are mark class names, and the values are a
---space-separated string of glyph names in this class.
---
---\stopsubsection
---
---\startsubsection[title={`math`}]
---
---The math table has the variables that are also discussed in the chapter aboout
---math: `ScriptPercentScaleDown`, `ScriptScriptPercentScaleDown`, `DelimitedSubFormulaMinHeight`, `DisplayOperatorMinHeight`, `MathLeading`, `AxisHeight`, `AccentBaseHeight`, `FlattenedAccentBaseHeight`, `SubscriptShiftDown`, `SubscriptTopMax`,
---`SubscriptBaselineDropMin`, `SuperscriptShiftUp`, `SuperscriptShiftUpCramped`, `SuperscriptBottomMin`, `SuperscriptBaselineDropMax`, `SubSuperscriptGapMin`, `SuperscriptBottomMaxWithSubscript`, `SpaceAfterScript`, `UpperLimitGapMin`, `UpperLimitBaselineRiseMin`, `LowerLimitGapMin`,
---`LowerLimitBaselineDropMin`, `StackTopShiftUp`, `StackTopDisplayStyleShiftUp`, `StackBottomShiftDown`, `StackBottomDisplayStyleShiftDown`, `StackGapMin`, `StackDisplayStyleGapMin`, `StretchStackTopShiftUp`, `StretchStackBottomShiftDown`, `StretchStackGapAboveMin`, `StretchStackGapBelowMin`, `FractionNumeratorShiftUp`, `FractionNumeratorDisplayStyleShiftUp`, `FractionDenominatorShiftDown`,
---`FractionDenominatorDisplayStyleShiftDown`, `FractionNumeratorGapMin`, `FractionNumeratorDisplayStyleGapMin` `FractionRuleThickness`, `FractionDenominatorGapMin`, `FractionDenominatorDisplayStyleGapMin`, `SkewedFractionHorizontalGap`,
---`SkewedFractionVerticalGap`, `OverbarVerticalGap`, `OverbarRuleThickness`, `OverbarExtraAscender`, `UnderbarVerticalGap`, `UnderbarRuleThickness`, `UnderbarExtraDescender`, `RadicalVerticalGap`, `RadicalDisplayStyleVerticalGap`, `RadicalRuleThickness`, `RadicalExtraAscender`, `RadicalKernBeforeDegree`, `RadicalKernAfterDegree`, `RadicalDegreeBottomRaisePercent`, `MinConnectorOverlap`, `FractionDelimiterSize` and `FractionDelimiterDisplayStyleSize`.
---
---\stopsubsection
---
---\startsubsection[title={`validation_state`}]
---
---This is just a bonus table with keys: `bad_ps_fontname`, `bad_glyph_table`, `bad_cff_table`, `bad_metrics_table`, `bad_cmap_table`, `bad_bitmaps_table`, `bad_gx_table`, `bad_ot_table`, `bad_os2_version` and `bad_sfnt_header`.
---
---\stopsubsection
---
---\startsubsection[title={`horiz_base` and `vert_base`}]
---
---\starttabulate[|l|l|p|]
---\DB key            \BC type  \BC explanation 
---\TB
--- `tags`     table  an array of script list tags
--- `scripts`  table  
---\LL
---\stoptabulate
---
---The `scripts` subtable:
---
---\starttabulate[|l|l|p|]
---\DB key                     \BC type    \BC explanation 
---\TB
--- `baseline`          table    
--- `default_baseline`  number   
--- `lang`              table    
---\LL
---\stoptabulate
---
---
---The `lang` subtable:
---
---\starttabulate[|l|l|p|]
---\DB key             \BC type   \BC explanation 
---\TB
--- `tag`       string  a script tag 
--- `ascent`    number  
--- `descent`   number  
--- `features`  table   
---\LL
---\stoptabulate
---
---The `features` points to an array of tables with the same layout except
---that in those nested tables, the tag represents a language.
---
---\stopsubsection
---
---\startsubsection[title={`altuni`}]
---
---An array of alternate \UNICODE\ values. Inside that array are hashes with:
---
---\starttabulate[|l|l|p|]
---\DB key            \BC type   \BC explanation 
---\TB
--- `unicode`  number  this glyph is also used for this unicode 
--- `variant`  number  the alternative is driven by this unicode selector 
---\LL
---\stoptabulate
---
---\stopsubsection
---
---\startsubsection[title={`vert_variants` and `horiz_variants`}]
---
---\starttabulate[|l|l|p|]
---\DB key                      \BC type   \BC explanation 
---\TB
--- `variants`           string  
--- `italic_correction`  number  
--- `parts`              table   
---\LL
---\stoptabulate
---
---The `parts` table is an array of smaller tables:
---
---\starttabulate[|l|l|p|]
---\DB key              \BC type   \BC explanation 
---\TB
--- `component`  string  
--- `extender`   number  
--- `start`      number  
--- `end`        number  
--- `advance`    number  
---\LL
---\stoptabulate
---
---\stopsubsection
---
---\startsubsection[title={`mathkern`}]
---
---\starttabulate[|l|l|p|]
---\DB key                 \BC type  \BC explanation 
---\TB
--- `top_right`     table  
--- `bottom_right`  table  
--- `top_left`      table  
--- `bottom_left`   table  
---\LL
---\stoptabulate
---
---Each of the subtables is an array of small hashes with two keys:
---
---\starttabulate[|l|l|p|]
---\DB key           \BC type   \BC explanation 
---\TB
--- `height`  number  
--- `kern`    number  
---\LL
---\stoptabulate
---
---\stopsubsection
---
---\startsubsection[title={`kerns`}]
---
---Substructure is identical to the per-glyph subtable.
---
---\stopsubsection
---
---\startsubsection[title={`vkerns`}]
---
---Substructure is identical to the per-glyph subtable.
---
---\stopsubsection
---
---\startsubsection[title={`texdata`}]
---
---\starttabulate[|l|l|p|]
---\DB key           \BC type   \BC explanation 
---\TB
--- `type`    string  `unset`, `text`, `math`, `mathext` 
--- `params`  array   22 font numeric parameters 
---\LL
---\stoptabulate
---
---\stopsubsection
---
---\startsubsection[title={`lookups`}]
---
---Top-level `lookups` is quite different from the ones at character level.
---The keys in this hash are strings, the values the actual lookups, represented as
---dictionary tables.
---
---\starttabulate[|l|l|p|]
---\DB key                  \BC type   \BC explanation 
---\TB
--- `type`           string  
--- `format`         enum    one of `glyphs`, `class`, `coverage`,
---                                        `reversecoverage` 
--- `tag`            string  
--- `current_class`  array   
--- `before_class`   array   
--- `after_class`    array   
--- `rules`          array   an array of rule items
---\LL
---\stoptabulate
---
---Rule items have one common item and one specialized item:
---
---\starttabulate[|l|l|p|]
---\DB key                    \BC type  \BC explanation 
---\TB
--- `lookups`          array  a linear array of lookup names                         
--- `glyphs`           array  only if the parent's format is `glyphs`          
--- `class`            array  only if the parent's format is `class`           
--- `coverage`         array  only if the parent's format is `coverage`        
--- `reversecoverage`  array  only if the parent's format is `reversecoverage` 
---\LL
---\stoptabulate
---
---A glyph table is:
---
---\starttabulate[|l|l|p|]
---\DB key          \BC type   \BC explanation 
---\TB
--- `names`  string  
--- `back`   string  
--- `fore`   string  
---\LL
---\stoptabulate
---
---A class table is:
---
---\starttabulate[|l|l|p|]
---\DB key            \BC type  \BC explanation 
---\TB
--- `current`  array  of numbers  
--- `before`   array  of numbers  
--- `after`    array  of numbers  
---\LL
---\stoptabulate
---
---for coverage:
---
---\starttabulate[|l|l|p|]
---\DB key            \BC type  \BC explanation 
---\TB
--- `current`  array  of strings 
--- `before`   array  of strings 
--- `after`    array  of strings 
---\LL
---\stoptabulate
---
---and for reverse coverage:
---
---\starttabulate[|l|l|p|]
---\DB key                 \BC type   \BC explanation 
---\TB
--- `current`       array   of strings  
--- `before`        array   of strings  
--- `after`         array   of strings  
--- `replacements`  string              
---\LL
---\stoptabulate
---
---\stopsubsection
---
---\stopsection
---
---\stopchapter
---
---\stopcomponent
---